1. Determine what this Javascript code will print out (without running it):
                x = 1;
                var a = 5;
                var b = 10;
                var c = function(a, b, c) {
                        document.write(x);
                        document.write(a);
                        var f = function(a, b, c) {
                                b = a;
                                document.write(b);
                                b = c;
                                var x = 5;
                            }
                        f(a,b,c);
                        document.write(b);
                        var x = 10;
                    }
                c(8,9,10);
                document.write(b);
                document.write(x);
                }

        answer:1,8,8,9,10,1

2. define GLobal and Local Scope in javaScript.

        Global Scope is the window, it is the outter most scope we have in javaScript
        local scope is the function scope, variables and method definition only last inside the curly braces of the function definition

3. consider the following structure of javaScript code 

    //scope A
    function xFun(){
        //SCOPE b
        FUNCTION yFUN(){
            //scope c
        };
    };


(a) Do statements in Scope A have access to variables defined in Scope B and C? No
(b) Do statements in Scope B have access to variables defined in Scope A?  yes
(c) Do statements in Scope B have access to variables defined in Scope C?  No
(d) Do statements in Scope C have access to variables defined in Scope A?  yes
(e) Do statements in Scope C have access to variables defined in Scope B?  yes

4. What will be printed by the following (answer without running it)?
            var x = 9;
            function myFunction() {
                        return x * x;
                    }
            document.write(myFunction());
            x = 5;
            document.write(myFunction());

    answer: 81,25
5.
            var foo = 1;
            function bar() {
                 if (!foo) {
                        var foo = 10;
                    }
                alert(foo);
            }
            bar();
What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?

    answer: 10

6. Consider the following definition of an add( ) function to increment a counter variable:
            var add = (function () {
                    var counter = 0;
                    return function () {
                        return counter += 1;
                    }
            })();
Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method
adds one to the counter (as above). The count.reset( ) method sets the counter to 0.
  
  answer:let count= (function(){
		var counter=0;
    return{
    add:function(){
    		return counter+=1;
    },
    reset:function(){
    		return counter=0;
    } 
    }
})();
count.add();//1
count.add();//2
count.reset();//0

7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a function closure,
what is a "free" variable?

    answer: counter is the free variable.
            free variable:it is a variable that is defined on upper levels of function, it means if not defined inside our context and we
            are using it then it is free variable


8. The add( ) function defined in question 6 always adds 1 to the counter each time it is called. Write a definition
of a function make_adder(inc), whose return value is an add function with increment value inc (instead of 1). Here
is an example of using this function:
        add5 = make_adder(5);
        add5( ); add5( ); add5( ); // final counter value is 15
        add7 = make_adder(7);
        add7( ); add7( ); add7( ); // final counter value is 21

    answer:
        let make_adder=(function(){
            let counter=0;
            returns function(val){
                return function(){
                    returns counter+=val;
                }
            }
        })();
9.Suppose you are given a file of Javascript code containing a list of many function and variable declarations. All of
these function and variable names will be added to the Global Javascript namespace. What simple modification to
the Javascript file can remove all the names from the Global namespace?

        answer: adding everthing into (funciton(){})();

10. Using the Revealing Module Pattern, write a Javascript definition of a Module that creates an Employee Object
with the following fields and methods:

(function(){

	let employee=(function(){
      let name;
      let age;
      let salary;
     
     let setAge=function(agen){
     			age=agen;
     }
     
     let setName=function(namee){
     			name=namee;
     }
     let setSalary=function(salaryy){
     			salary=salaryy;
     }
     let getAge=function(){
       return age;
     }
     
     let getName=function(){
     			return name;
     }
     let getSalary=function(){
     		return salary;
     }
     
     let incAge=function(){
     			return age=getAge()+1;
     }
     let incSalary=function(perc){
     			let inc= getSalary()*perc/100;
          return salary=getSalary()+inc;
     }
    return {setAge:setAge, setName:setName, incAge:incAge, incSalary:incSalary, setSalary:setSalary};
  })();
  
  
  let e1=employee;
  e1.setName('merhawit');
  e1.setAge(24);
  e1.incAge();
  e1.setSalary(1000000)
  console.log(e1.incSalary(50))
})();


11.Rewrite your answer to Question 10 using the Anonymous Object Literal Return Pattern.

(function(){

	let employee=(function(){
      let name;
      let age;
      let salary;
     
     
     let getAge=function(){
       return age;
     }
     
     let getName=function(){
     			return name;
     }
     let getSalary=function(){
     		return salary;
     }
     
    return {
    	setAge:function(agen){
     			age=agen;
     },
     
     setName:function(namee){
     			name=namee;
     },
     setSalary:function(salaryy){
     			salary=salaryy;
     },
     
     incAge:function(){
     			return age=getAge()+1;
     },
     incSalary:function(perc){
     			let inc= getSalary()*perc/100;
          return salary=getSalary()+inc;
     }
    };
  })

12. Rewrite your answer to Question 10 using the Locally Scoped Object Literal Pattern.

(function(){

	let employee=(function(){
      let name;
      let age;
      let salary;
     
     
     let getAge=function(){
       return age;
     }
     
     let getName=function(){
     			return name;
     }
     let getSalary=function(){
     		return salary;
     }
     
     let myobj={};
     
    
    	myobj.setAge=function(agen){
     			age=agen;
     }
     
     myobj.setName=function(namee){
     			name=namee;
     }
     myobj.setSalary=function(salaryy){
     			salary=salaryy;
     }
     
    myobj.incAge=function(){
     			return age=getAge()+1;
     }
     myobj.incSalary=function(perc){
     			let inc= getSalary()*perc/100;
          return salary=getSalary()+inc;
     }
    return myobj;
  })();

13. Write a few Javascript instructions to extend the Module of Question 10 to have a public address field and
public methods setAddress(newAddress) and getAddress( ).

(function(){

	let employee=(function(){
      let name;
      let age;
      let salary;
     	let address
     
     let getAge=function(){
       return age;
     }
     
     let getName=function(){
     			return name;
     }
     let getSalary=function(){
     		return salary;
     }
     
     let myobj={};
     
    
    	myobj.setAge=function(agen){
     			age=agen;
     }
     
     myobj.setName=function(namee){
     			name=namee;
     }
     myobj.setSalary=function(salaryy){
     			salary=salaryy;
     }
     
    myobj.incAge=function(){
     			return age=getAge()+1;
     }
     myobj.incSalary=function(perc){
     			let inc= getSalary()*perc/100;
          return salary=getSalary()+inc;
     }
    return myobj;
  })();
  
  employee.setAdress=function(add){
  		address=add;
  }
  employee.getAddress=function(){
  		return address;
  }
  let e1=employee;
  e1.setName('merhawit');
  e1.setAge(24);
  e1.incAge();
  e1.setSalary(1000000)
  e1.setAdress('mekelle')
  console.log(e1.getAddress())
})();
14. What is the output of the following code?
        const promise = new Promise((resolve, reject) => {
                 reject(“Hattori”);
        });
        promise.then(val => alert(“Success: “ + val))
        .catch(e => alert(“Error: “ + e));

    answer: it will alet Error: Hattori

15.15. What is the output of the following code?
            const promise = new Promise((resolve, reject) => {
                    resolve(“Hattori”);
                    setTimeout(()=> reject(“Yoshi”), 500);
            });
            promise.then(val => alert(“Success: “ + val))
            .catch(e => alert(“Error: “ + e));

    answer: it will aler Success: Hattori if time out didn't start(if resolved before the timer)
            otherwise it will aler Error:Yoshi 